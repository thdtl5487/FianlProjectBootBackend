
server.port = 9003

server.servlet.context-path=/
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
spring.datasource.username=FantasticFour
spring.datasource.password=FantasticFour
# hikari DBCP auto-commit true 설정
spring.datasource.hikari.auto-commit=true
# hikari connection-timeout: pool에서 커넥션을 얻어오기전까지 기다리는 최대 시간,
# 허용가능한 wait time을 초과하면 SQLException을 예외처리함.
# 설정가능한 가장 작은 시간은 250ms (default: 30000 (30s)), 우리는 60s로 설정함
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.maximum-pool-size=30
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect

#스키마 생성(create)
# spring.jpa.hibernate.ddl-auto는 데이터베이스에 구조를 생성하는 DDL(Data Definition Language) 처리 옵션 지정 명령어
# update = 변경된 부분만 update 반영
# validate = Entity와 Table이 정상적으로 매핑되었는지만 확인
# none = 사용하지 않음
# create-drop = create와 같지만 종료 시점에 테이블 DROP 처리
# create = 기존 테이블 삭제 후 다시 생성
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=create
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true
spring.jpa.database=oracle

# 로그 레벨 info 지정
logging.level.org.hibernate=info
# 로그 레벨 debug 지정 : 상세 debug 로그 확인 가능함 
#logging.level.org.hibernate=debug

jwt.secret=c2hhcmtib2F0ZHVja3J1ZG9scGh0cmFzaHJlY3JlYXRlZ3JhbnRjaGVlc2Vob21lZnRzcmVhY3RwcmVhY3Rnb2FsdGlsdHJldmlld2NvZGVyYW5kb21lbmVteXRyZWJ1Y2hldGJyZWFkZnJhbmNlbnVtYmVyd29yZHdvcmxkY2xpbWF0ZW5lYXJmYXJ3aGVyZXZlcnlvdWFyZXdoYXR3YXNpZG9pbmdhZ2FpbmR1bm5vZXZlbg==